diff --git a/openfl/display/XFLMovieClip.hx b/openfl/display/XFLMovieClip.hx
index 4c2e78d..8e92465 100644
--- a/openfl/display/XFLMovieClip.hx
+++ b/openfl/display/XFLMovieClip.hx
@@ -2,6 +2,7 @@ package openfl.display;
 
 import xfl.XFL;
 import xfl.dom.DOMTimeline;
+import xfl.dom.DOMSymbolItemScaleGrid;
 import xfl.symbol.MovieClip;
 import openfl.controls.Slider;
 import openfl.display.DisplayObject;
@@ -16,8 +17,8 @@ class XFLMovieClip extends MovieClip implements XFLElement {
 
 	private var xflImplementation: XFLImplementation;
 
-	public function new(xfl: XFL = null, timeline: DOMTimeline = null) {
-		super(xfl, timeline);
+	public function new(xfl: XFL = null, timeline: DOMTimeline = null, scaleGrid: DOMSymbolItemScaleGrid = null) {
+		super(xfl, timeline, scaleGrid);
 		xflImplementation = new XFLImplementation(this);
 	}
 
diff --git a/openfl/display/XFLSprite.hx b/openfl/display/XFLSprite.hx
index d6bef47..803b8ea 100644
--- a/openfl/display/XFLSprite.hx
+++ b/openfl/display/XFLSprite.hx
@@ -2,6 +2,7 @@ package openfl.display;
 
 import xfl.XFL;
 import xfl.dom.DOMTimeline;
+import xfl.dom.DOMSymbolItemScaleGrid;
 import xfl.symbol.Sprite;
 import openfl.controls.Slider;
 import openfl.display.XFLElement;
@@ -17,8 +18,8 @@ class XFLSprite implements XFLElement extends Sprite {
     /**
      * Public constructor
      **/
-	public function new(xfl: XFL = null, timeline: DOMTimeline = null) {
-		super(xfl, timeline);
+	public function new(xfl: XFL = null, timeline: DOMTimeline = null, scaleGrid: DOMSymbolItemScaleGrid = null) {
+		super(xfl, timeline, scaleGrid);
         xflImplementation = new XFLImplementation(this);
     }
 
diff --git a/xfl/XFL.hx b/xfl/XFL.hx
index af080e1..fcc0aac 100644
--- a/xfl/XFL.hx
+++ b/xfl/XFL.hx
@@ -5,6 +5,8 @@ import xfl.dom.DOMBitmapItem;
 import xfl.dom.DOMDocument;
 import xfl.dom.DOMSoundItem;
 import xfl.dom.DOMSymbolItem;
+import xfl.dom.DOMSymbolItemScaleGrid;
+import xfl.dom.DOMTimeline;
 import openfl.display.BitmapData;
 import openfl.display.XFLMovieClip;
 import openfl.display.XFLSprite;
@@ -64,12 +66,14 @@ class XFL {
 	}
 
 	public function createMovieClip (name: String): XFLMovieClip {
-		var timeline = null;
+		var timeline: DOMTimeline = null;
+		var scaleGrid: DOMSymbolItemScaleGrid = null;
 		for (document in documents) {
 			for (symbol in document.symbols) {
 				if (symbol.linkageClassName == name && symbol.linkageExportForAS == true) {
 					if (Std.is(symbol, DOMSymbolItem)) {
 						timeline = symbol.timeline;
+						scaleGrid = symbol.scaleGrid;
 						break;
 					}
 				}
@@ -78,7 +82,7 @@ class XFL {
 		}
 
 		if (timeline != null) {
-			return new XFLMovieClip(this, timeline);
+			return new XFLMovieClip(this, timeline, scaleGrid);
 		}
 
 		trace("createMovieClip(): movie clip not found: " + name);
@@ -86,12 +90,14 @@ class XFL {
 	}
 
 	public function createSprite (name: String): XFLSprite {
-		var timeline = null;
+		var timeline: DOMTimeline = null;
+		var scaleGrid: DOMSymbolItemScaleGrid = null;
 		for (document in documents) {
 			for (symbol in document.symbols) {
 				if (symbol.linkageClassName == name && symbol.linkageExportForAS == true) {
 					if (Std.is(symbol, DOMSymbolItem)) {
 						timeline = symbol.timeline;
+						scaleGrid = symbol.scaleGrid;
 						break;
 					}
 				}
@@ -100,7 +106,7 @@ class XFL {
 		}
 
 		if (timeline != null) {
-			return new XFLSprite(this, timeline);
+			return new XFLSprite(this, timeline, scaleGrid);
 		}
 
 		trace("createSprite(): sprite not found: " + name);
diff --git a/xfl/XFLAssets.hx b/xfl/XFLAssets.hx
index a76d0c6..bb18cb1 100644
--- a/xfl/XFLAssets.hx
+++ b/xfl/XFLAssets.hx
@@ -4,6 +4,7 @@ import openfl.display.BitmapData;
 import openfl.display.XFLMovieClip;
 import openfl.display.XFLSprite;
 import openfl.media.Sound;
+import xfl.symbol.Shared;
 
 /**
  * XFL assets class
@@ -35,7 +36,9 @@ class XFLAssets {
      *  @return XFLMovieClip
      */
     public function getXFLMovieClipAsset(assetName: String) : XFLMovieClip {
-        return xfl.createMovieClip(assetName);
+        var xflMovieClip: XFLMovieClip = xfl.createMovieClip(assetName);
+        if (xflMovieClip != null) Shared.resizeChildren(xflMovieClip);
+        return xflMovieClip;
     }
 
     /**
@@ -44,7 +47,9 @@ class XFLAssets {
      *  @return XFLSprite
      */
     public function getXFLSpriteAsset(assetName: String) : XFLSprite {
-        return xfl.createSprite(assetName);
+        var xflSprite: XFLSprite = xfl.createSprite(assetName);
+        if (xflSprite != null) Shared.resizeChildren(xflSprite);
+        return xflSprite;
     }
 
     /**
diff --git a/xfl/dom/DOMSymbolItem.hx b/xfl/dom/DOMSymbolItem.hx
index 8aa3dc4..52277d3 100644
--- a/xfl/dom/DOMSymbolItem.hx
+++ b/xfl/dom/DOMSymbolItem.hx
@@ -12,6 +12,8 @@ class DOMSymbolItem {
 	public var name: String;
 	public var timeline: DOMTimeline;
 
+	public var scaleGrid: DOMSymbolItemScaleGrid;
+
 	public function new () {
 	}
 
@@ -26,6 +28,12 @@ class DOMSymbolItem {
 		symbolItem.linkageBaseClass = xml.has.linkageBaseClass == true?xml.att.linkageBaseClass:null;
 		if (xml.has.linkageExportForAS) symbolItem.linkageExportForAS = (xml.att.linkageExportForAS == "true");
 		if (xml.has.linkageClassName) symbolItem.linkageClassName = xml.att.linkageClassName;
+		if (xml.has.scaleGridLeft == true ||
+			xml.has.scaleGridRight == true ||
+			xml.has.scaleGridTop == true ||
+			xml.has.scaleGridBottom == true) {
+			symbolItem.scaleGrid = DOMSymbolItemScaleGrid.parse(xml);
+		}
 		for (element in xml.elements) {
 			switch (element.name) {
 				case "timeline":
diff --git a/xfl/symbol/MovieClip.hx b/xfl/symbol/MovieClip.hx
index 5466da1..b83d867 100644
--- a/xfl/symbol/MovieClip.hx
+++ b/xfl/symbol/MovieClip.hx
@@ -1,6 +1,7 @@
 package xfl.symbol;
 
 import xfl.dom.DOMLayer;
+import xfl.dom.DOMSymbolItemScaleGrid;
 import xfl.dom.DOMTimeline;
 import xfl.XFL;
 import openfl.display.DisplayObject;
@@ -10,6 +11,8 @@ import openfl.Lib;
 
 class MovieClip extends xfl.display.MovieClip {
 
+	public var scaleGrid: DOMSymbolItemScaleGrid;
+
 	private static var clips: Array <MovieClip> = new Array <MovieClip>();
 
 	private var lastFrame: Int;
@@ -17,16 +20,17 @@ class MovieClip extends xfl.display.MovieClip {
 	private var playing: Bool;
 	private var xfl: XFL;
 
-	public function new(xfl: XFL, timeline: DOMTimeline) {
+	public function new(xfl: XFL, timeline: DOMTimeline, scaleGrid: DOMSymbolItemScaleGrid) {
 		super();
 		this.xfl = xfl;
+		this.scaleGrid = scaleGrid;
 		currentLabels = [];
 		Lib.current.stage.addEventListener(Event.ENTER_FRAME, stage_onEnterFrame);
 		lastFrame = -1;
 		currentFrame = timeline != null?timeline.currentFrame:1;
 		layers = new Array<DOMLayer>();
 		totalFrames = Shared.init(layers, timeline, currentLabels);
-		Shared.createFrames(this.xfl, this, layers);
+		Shared.createFrames(this.xfl, this, layers, scaleGrid);
 		update();
 		if (totalFrames > 1) {
 			play();
diff --git a/xfl/symbol/Shape.hx b/xfl/symbol/Shape.hx
index 514c481..bb016f6 100644
--- a/xfl/symbol/Shape.hx
+++ b/xfl/symbol/Shape.hx
@@ -2,15 +2,66 @@ package xfl.symbol;
 
 import xfl.symbol.Symbol;
 import xfl.dom.DOMShape;
+import xfl.dom.DOMSymbolItemScaleGrid;
 import openfl.display.Graphics;
+import openfl.display.LineScaleMode;
+import openfl.events.Event;
+import openfl.geom.Point;
+import openfl.geom.Rectangle;
 
 class Shape extends ShapeBase {
 
 	public var domShape: DOMShape;
 
-	public function new(domShape: DOMShape) {
+	private var scaleGrid: DOMSymbolItemScaleGrid;
+	private var scaleGridRectangle: Rectangle;
+	private var shapeBoundsRectangle: Rectangle;
+	private var shapeBoundsRectangleScaled: Rectangle;
+	private var initialPass: Bool;
+	public var originalLeft: Float;
+	public var originalTop: Float;
+	public var originalWidth: Float;
+	public var originalHeight: Float;
+	private var scaleShapeWidth: Float;
+	private var scaleShapeHeight: Float;
+
+	public function new(domShape: DOMShape, scaleGrid: DOMSymbolItemScaleGrid) {
 		super();
 		this.domShape = domShape;
+		this.scaleGrid = scaleGrid;
+		this.scaleGridRectangle = new Rectangle(
+			scaleGrid.left,
+			scaleGrid.top,
+			scaleGrid.right - scaleGrid.left,
+			scaleGrid.bottom - scaleGrid.top
+		);
+		this.initialPass = true;
+		this.originalLeft = 100000;
+		this.originalTop = 100000;
+		this.shapeBoundsRectangleScaled = null;
+		this.createShape(1.0, 1.0);
+		this.originalWidth = width;
+		this.originalHeight = height;
+		this.shapeBoundsRectangle = scaleGridRectangle;
+		this.initialPass = false;
+	}
+
+	public function scaleBounds(scaleBoundsWidth: Float, scaleBoundsHeight: Float) {
+		this.shapeBoundsRectangleScaled = new Rectangle(
+			originalLeft * scaleBoundsWidth,
+			originalTop * scaleBoundsHeight,
+			originalWidth * scaleBoundsWidth,
+			originalHeight * scaleBoundsHeight
+		);
+	}
+
+	public function createShape(scaleShapeWidth: Float, scaleShapeHeight: Float) {
+		graphics.clear();
+		var c: Point = new Point();
+		var p: Point = new Point();
+		var pen: Point = new Point();
+		this.scaleShapeWidth = scaleShapeWidth;
+		this.scaleShapeHeight = scaleShapeHeight;
 		for (edge in domShape.edges) {
 			commands = [];
 			fillStyles = readFillStyles(domShape);
@@ -34,7 +85,7 @@ class Shape extends ShapeBase {
 			if (newLineStyle) {
 				var lineStyle = edge.strokeStyle;
 				var func = lineStyles[lineStyle];
-				edges.push (func);
+				edges.push(func);
 				currentLine = lineStyle;
 			}
 			var data = edge.edges;
@@ -55,53 +106,53 @@ class Shape extends ShapeBase {
 					}
 					switch (cmds[i]) {
 						case "!":
-							var px = Std.parseInt (cmds[i + 1]) / 20;
-							var py = Std.parseInt (cmds[i + 2]) / 20;
+							setShapePoint(p, Std.parseInt(cmds[i + 1]) / 20, Std.parseInt(cmds[i + 2]) / 20, true);
 							edges.push (function (g:Graphics) {
-								g.moveTo (px, py);
+								g.moveTo (p.x, p.y);
 							});
-							penX = px;
-							penY = py;
+							pen.x = p.x;
+							pen.y = p.y;
 							ignoreI+= 2;
 						case "|":
-							var px = Std.parseInt (cmds[i + 1]) / 20;
-							var py = Std.parseInt (cmds[i + 2]) / 20;
+							setShapePoint(p, Std.parseInt(cmds[i + 1]) / 20, Std.parseInt(cmds[i + 2]) / 20, true);
 							if (currentLine > 0) {
 								edges.push(function (g:Graphics) {
-									g.lineTo (px, py);
+									g.lineTo(p.x, p.y);
 								});
 							} else {
 								edges.push(function (g:Graphics) {
-									g.moveTo (px, py);
+									g.lineTo(p.x, p.y);
 								});
 							}
 							if (currentFill0 > 0) {
-								fills.push(ShapeEdge.line(currentFill0, penX, penY, px, py));
+								fills.push(ShapeEdge.line(currentFill0, pen.x, pen.y, p.x, p.y));
 							}
 							if (currentFill1 > 0) {
-								fills.push(ShapeEdge.line(currentFill1, px, py, penX, penY));
+								fills.push(ShapeEdge.line(currentFill1, p.x, p.y, pen.x, pen.y));
 							}
-							penX = px;
-							penY = py;
+							pen.x = p.x;
+							pen.y = p.y;
 							ignoreI+= 2;
 						case "[":
-							var cx = parseHexCmd(cmds[i + 1].split (".")[0]) / 20;
-							var cy = parseHexCmd(cmds[i + 2].split (".")[0]) / 20;
-							var px = parseHexCmd(cmds[i + 3].split (".")[0]) / 20;
-							var py = parseHexCmd(cmds[i + 4].split (".")[0]) / 20;
+							setShapePoint(c, parseHexCmd(cmds[i + 1].split(".")[0]) / 20, parseHexCmd(cmds[i + 2].split(".")[0]) / 20, false);
+							setShapePoint(p, parseHexCmd(cmds[i + 3].split(".")[0]) / 20, parseHexCmd(cmds[i + 4].split(".")[0]) / 20, true);
 							if (currentLine > 0) {
 								edges.push (function (g:Graphics) {
-									g.curveTo (cx, cy, px, py);
+									g.curveTo (c.x, c.y, p.x, p.y);
 								});
+							} else {
+								edges.push (function (g:Graphics) {
+									g.curveTo (c.x, c.y, p.x, p.y);
+								});								
 							}
 							if (currentFill0 > 0) {	
-								fills.push(ShapeEdge.curve(currentFill0, penX, penY, cx, cy, px, py));
+								fills.push(ShapeEdge.curve(currentFill0, pen.x, pen.y, c.x, c.y, p.x, p.y));
 							}
 							if (currentFill1 > 0) {
-								fills.push(ShapeEdge.curve(currentFill1, px, py, cx, cy, penX, penY));
+								fills.push(ShapeEdge.curve(currentFill1, p.x, p.y, c.x, c.y, pen.x, pen.y));
 							}
-							penX = px;
-							penY = py;
+							pen.x = p.x;
+							pen.y = p.y;
 							ignoreI+= 4;
 						case "":
 							// no op
@@ -117,6 +168,33 @@ class Shape extends ShapeBase {
 		}
 	}
 
+	private function setShapePoint(point: Point, x: Float, y: Float, isPoint: Bool): Void {
+		point.setTo(x, y);
+		if (initialPass == true || scaleGridRectangle.containsPoint(point) == true || isPoint == false) {
+			point.x*= scaleShapeWidth;
+			point.y*= scaleShapeHeight;
+		} else {
+			if (point.x < scaleGridRectangle.x + scaleGridRectangle.width / 2) {
+				var offsetLeft = point.x - originalLeft;
+				point.x = shapeBoundsRectangleScaled.x + offsetLeft;
+			} else {
+				var offsetRight = (originalLeft + originalWidth) - point.x;
+				point.x = shapeBoundsRectangleScaled.x + shapeBoundsRectangleScaled.width - offsetRight;
+			}
+			if (point.y < scaleGridRectangle.y + scaleGridRectangle.height / 2) {
+				var offsetTop = point.y - originalTop;
+				point.y = shapeBoundsRectangleScaled.y + offsetTop;
+			} else {
+				var offsetBottom = (originalLeft + originalWidth) - point.y;
+				point.y = shapeBoundsRectangleScaled.y + shapeBoundsRectangleScaled.height - offsetBottom;
+			}
+		}
+		if (initialPass == true && isPoint == true) {
+			if (point.x < originalLeft) originalLeft = point.x;
+			if (point.y < originalTop) originalTop = point.y;
+		}
+	}
+
 	private function parseHexCmd(cmd: String): Int {
 		var value: Int = Std.parseInt (StringTools.replace(cmd, "#", "0x").split (".")[0]);
 		if (StringTools.startsWith(cmd, "#") == true && 
@@ -127,4 +205,30 @@ class Shape extends ShapeBase {
 		return value;
 	}
 
+	override private function set_width(width: Float): Float {
+		if (Math.abs(super.width - width) < 0.01) return width;
+		scaleBounds(
+			width / originalWidth,
+			height / originalHeight
+		);
+		createShape(
+			(width - ((originalLeft - scaleGrid.left) + (originalLeft + originalWidth - scaleGrid.right))) / shapeBoundsRectangle.width, 
+			(height - ((originalTop - scaleGrid.top) + (originalTop + originalHeight - scaleGrid.bottom))) / shapeBoundsRectangle.height
+		);
+		return width;
+	}
+
+	override private function set_height(height: Float): Float {
+		if (Math.abs(super.height - height) < 0.01) return height;
+		scaleBounds(
+			width / originalWidth,
+			height / originalHeight
+		);
+		trace(name + ": sbrs: " + this.shapeBoundsRectangleScaled);
+		createShape(
+			(width - ((originalLeft - scaleGrid.left) + (originalLeft + originalWidth - scaleGrid.right))) / shapeBoundsRectangle.width, 
+			(height - ((originalTop - scaleGrid.top) + (originalTop + originalHeight - scaleGrid.bottom))) / shapeBoundsRectangle.height
+		);
+		return height;
+	}
 }
diff --git a/xfl/symbol/ShapeBase.hx b/xfl/symbol/ShapeBase.hx
index 15eef09..0d3365a 100644
--- a/xfl/symbol/ShapeBase.hx
+++ b/xfl/symbol/ShapeBase.hx
@@ -11,6 +11,7 @@ import openfl.display.GradientType;
 import openfl.display.Graphics;
 import openfl.display.GraphicsPath;
 import openfl.display.GraphicsPathWinding;
+import openfl.display.LineScaleMode;
 
 class ShapeBase extends openfl.display.Shape {
 
@@ -141,7 +142,7 @@ class ShapeBase extends openfl.display.Shape {
 					var weight = strokeStyle.data.weight;
 					var color = strokeStyle.data.fill.color;
 					var alpha = strokeStyle.data.fill.alpha;
-					result.push(function (g: Graphics) { g.lineStyle(weight, color, alpha); } );
+					result.push(function (g: Graphics) { g.lineStyle(weight, color, alpha, true, LineScaleMode.NONE); } );
 				}
 			}
 		}
diff --git a/xfl/symbol/Shared.hx b/xfl/symbol/Shared.hx
index 585ed34..7b4cff8 100644
--- a/xfl/symbol/Shared.hx
+++ b/xfl/symbol/Shared.hx
@@ -11,16 +11,20 @@ import xfl.dom.DOMShape;
 import xfl.dom.DOMRectangle;
 import xfl.dom.DOMTimeline;
 import xfl.dom.DOMSymbolInstance;
+import xfl.dom.DOMSymbolItemScaleGrid;
 import xfl.geom.Matrix;
+import xfl.symbol.Shape;
 import openfl.display.Bitmap;
 import openfl.display.BitmapData;
 import openfl.display.DisplayObject;
 import openfl.display.DisplayObjectContainer;
 import openfl.display.FrameLabel;
 import openfl.display.XFLMovieClip;
+import openfl.display.XFLSprite;
+import openfl.geom.Point;
 
 /**
- * Shared between Sprite and MovieClip
+ * Shared between XFLSprite and XFLMovieClip
  */
 class Shared {
 
@@ -92,7 +96,7 @@ class Shared {
 		*/
 	}
 
-    public static function createFrames(xfl: XFL, container: DisplayObjectContainer, layers: Array<DOMLayer>): Void {
+    public static function createFrames(xfl: XFL, container: DisplayObjectContainer, layers: Array<DOMLayer>, scaleGrid: DOMSymbolItemScaleGrid): Void {
 		var currentLayer: Int = 0;
 		for (layer in layers) {
 			// TODO: a.drewke, handle hit area correctly
@@ -138,7 +142,7 @@ class Shared {
 							}
 						} else 
 						if (Std.is(element, DOMShape)) {
-							var shape: Shape = Symbols.createShape(xfl, cast element);
+							var shape: Shape = Symbols.createShape(xfl, cast element, scaleGrid);
 							shape.name = "xfl_anonymous_" + currentLayer + "_" + frame.index + "_" + (frameAnonymousObjectId++);
 							shape.visible = false;
 							container.addChild(shape);
@@ -336,4 +340,132 @@ class Shared {
             parent.removeChildAt(0);
         }
     }
+
+	public static function resizeChildren(parent: DisplayObjectContainer) {
+		if (parent.numChildren == 0) return;
+		var scaleGrid: DOMSymbolItemScaleGrid = null;
+		if (Std.is(parent, XFLMovieClip) == true) {
+			scaleGrid = cast(parent, XFLMovieClip).scaleGrid;
+		} else
+		if (Std.is(parent, XFLSprite) == true) {
+			scaleGrid = cast(parent, XFLSprite).scaleGrid;
+		}
+		var scaleGridLeft: Float = scaleGrid != null && scaleGrid.left != null?scaleGrid.left:-100000;
+		var scaleGridRight: Float = scaleGrid != null && scaleGrid.right != null?scaleGrid.right:100000;
+		var scaleGridTop: Float = scaleGrid != null && scaleGrid.top != null?scaleGrid.top:-100000;
+		var scaleGridBottom: Float = scaleGrid != null && scaleGrid.bottom != null?scaleGrid.bottom:100000;
+		var scaleGridRectangle: openfl.geom.Rectangle = new openfl.geom.Rectangle(scaleGridLeft, scaleGridTop, scaleGridRight - scaleGridLeft, scaleGridBottom - scaleGridTop);
+		var parentScaleX: Float = parent.scaleX;
+		var parentScaleY: Float = parent.scaleY;
+		if (Math.abs(parentScaleX - 1.0) < 0.1 && Math.abs(parentScaleY - 1.0) < 0.1) return;
+		var childrenBoundsRectangle: openfl.geom.Rectangle = null;
+		var childrenRectangle: openfl.geom.Rectangle = null;
+		for (i in 0...parent.numChildren) {
+			var child: DisplayObject = parent.getChildAt(i);
+			var childBoundsRectangle: openfl.geom.Rectangle = child.getBounds(null);
+			if (childrenBoundsRectangle == null) {
+				childrenBoundsRectangle = childBoundsRectangle;
+			} else {
+				childrenBoundsRectangle = childrenBoundsRectangle.union(childBoundsRectangle);
+			}
+			//
+			var childRectangle: openfl.geom.Rectangle = new openfl.geom.Rectangle(child.x, child.y, child.width, child.height);
+			if (childrenRectangle == null) {
+				childrenRectangle = childRectangle;
+			} else {
+				childrenRectangle = childrenRectangle.union(childRectangle);
+			}
+		}
+		var scaleGridScaled: DOMSymbolItemScaleGrid = new DOMSymbolItemScaleGrid();
+		scaleGridScaled.left = parentScaleX * childrenBoundsRectangle.left + (scaleGridLeft - childrenBoundsRectangle.left);
+		scaleGridScaled.top = parentScaleY * childrenBoundsRectangle.top + (scaleGridTop - childrenBoundsRectangle.top);
+		scaleGridScaled.right = parentScaleX * childrenBoundsRectangle.left + parentScaleX * childrenBoundsRectangle.width + (scaleGridRight - childrenBoundsRectangle.width - childrenBoundsRectangle.x);
+		scaleGridScaled.bottom = parentScaleY * childrenBoundsRectangle.top + parentScaleY * childrenBoundsRectangle.height + (scaleGridBottom - childrenBoundsRectangle.height - childrenBoundsRectangle.y);
+		var childrenRectangleScaled: openfl.geom.Rectangle = new openfl.geom.Rectangle(
+			childrenRectangle.left * parentScaleX, 
+			childrenRectangle.top * parentScaleY, 
+			childrenRectangle.width * parentScaleX, 
+			childrenRectangle.height * parentScaleY
+		);
+		trace(parent.name + ":crs: " + childrenRectangleScaled);
+        for (i in 0...parent.numChildren) {
+            var child: DisplayObject = parent.getChildAt(i);
+			var childBoundsRectangle: openfl.geom.Rectangle = child.getBounds(null);
+			var childRectangle: openfl.geom.Rectangle = new openfl.geom.Rectangle(
+				child.x, 
+				child.y, 
+				child.width, 
+				child.height
+			);
+			var childRectangleScaled: openfl.geom.Rectangle = new openfl.geom.Rectangle(
+				child.x * parentScaleX, 
+				child.y * parentScaleY, 
+				child.width * parentScaleX, 
+				child.height * parentScaleY
+			);
+			// if (scaleGridRectangle.containsRect(childBoundsRectangle) == true) {
+				child.x*= parentScaleX;
+				child.y*= parentScaleY;
+				child.width*= parentScaleX;
+				child.height*= parentScaleY;
+			 /*} else {
+				var childTopLeft: Point = new Point(childBoundsRectangle.x, childBoundsRectangle.y);
+				var childBottomRight: Point = new Point(
+					childBoundsRectangle.x + childBoundsRectangle.width,
+					childBoundsRectangle.y + childBoundsRectangle.height
+				);
+				scalePoint(
+					childTopLeft, 
+					parentScaleX, 
+					parentScaleY,
+					scaleGridRectangle,
+					childrenRectangleScaled
+				);
+				scalePoint(
+					childBottomRight, 
+					parentScaleX, 
+					parentScaleY,
+					scaleGridRectangle,
+					childrenRectangleScaled
+				);
+				child.width = childBottomRight.x - childTopLeft.x;
+				child.height = childBottomRight.y - childTopLeft.y;
+				child.x = childTopLeft.x;
+				child.y = childTopLeft.y;
+			}
+			*/
+            if (Std.is(child, DisplayObjectContainer)) {
+                resizeChildren(cast(child, DisplayObjectContainer));
+            }
+        }
+		parent.scaleX = 1.0;
+		parent.scaleY = 1.0;
+	}
+
+	private static function scalePoint(
+		point: Point, 
+		parentScaleX: Float, parentScaleY: Float,
+		scaleGridRectangle: openfl.geom.Rectangle,
+		boundsRectangleScaled: openfl.geom.Rectangle): Void {
+		if (scaleGridRectangle.containsPoint(point) == true) {
+			point.x*= parentScaleX;
+			point.y*= parentScaleY;
+		} else {
+			if (point.x < scaleGridRectangle.x + scaleGridRectangle.width / 2) {
+				var offsetLeft = 0.0;
+				point.x = boundsRectangleScaled.x + offsetLeft;
+			} else {
+				var offsetRight = 0.0;
+				point.x = boundsRectangleScaled.x + boundsRectangleScaled.width - offsetRight;
+			}
+			if (point.y < scaleGridRectangle.y + scaleGridRectangle.height / 2) {
+				var offsetTop = 0.0;
+				point.y = boundsRectangleScaled.y + offsetTop;
+			} else {
+				var offsetBottom = 0.0;
+				point.y = boundsRectangleScaled.y + boundsRectangleScaled.height - offsetBottom;
+			}
+		}
+	}
+
 }
diff --git a/xfl/symbol/Sprite.hx b/xfl/symbol/Sprite.hx
index 75215e3..903e34c 100644
--- a/xfl/symbol/Sprite.hx
+++ b/xfl/symbol/Sprite.hx
@@ -1,21 +1,22 @@
 package xfl.symbol;
 
 import xfl.dom.DOMLayer;
+import xfl.dom.DOMSymbolItemScaleGrid;
 import xfl.dom.DOMTimeline;
 import xfl.XFL;
 import openfl.display.FrameLabel;
 
 class Sprite extends xfl.display.Sprite {
 
-	private static var clips: Array <MovieClip>;
+	public var scaleGrid: DOMSymbolItemScaleGrid;
 
-	public function new(xfl: XFL, timeline: DOMTimeline) {
+	public function new(xfl: XFL, timeline: DOMTimeline, scaleGrid: DOMSymbolItemScaleGrid) {
 		super();
-		clips = new Array<MovieClip>();
+		this.scaleGrid = scaleGrid;
 		var labels: Array<FrameLabel> = new Array<FrameLabel>();
 		var layers: Array<DOMLayer> = new Array<DOMLayer>();
 		Shared.init(layers, timeline, labels);
-		Shared.createFrames(xfl, this, layers);
+		Shared.createFrames(xfl, this, layers, scaleGrid);
 		Shared.enableFrame(xfl, this, layers, timeline != null?timeline.currentFrame:1);
 	}
 
diff --git a/xfl/symbol/Symbols.hx b/xfl/symbol/Symbols.hx
index 0bb6a76..93241d3 100644
--- a/xfl/symbol/Symbols.hx
+++ b/xfl/symbol/Symbols.hx
@@ -9,6 +9,7 @@ import xfl.dom.DOMRectangle;
 import xfl.dom.DOMStaticText;
 import xfl.dom.DOMSymbolInstance;
 import xfl.dom.DOMSymbolItem;
+import xfl.dom.DOMSymbolItemScaleGrid;
 import openfl.display.DisplayObject;
 import openfl.display.Bitmap;
 import openfl.display.BitmapData;
@@ -20,8 +21,8 @@ import openfl.text.TextFormatAlign;
 
 class Symbols {
 
-	public static function createShape(xfl: XFL, instance: DOMShape): Shape {
-		var shape = new Shape(instance);
+	public static function createShape(xfl: XFL, instance: DOMShape, scaleGrid: DOMSymbolItemScaleGrid): Shape {
+		var shape = new Shape(instance, scaleGrid);
 		if (instance.matrix != null) {
 			shape.transform.matrix = instance.matrix;
 		}
@@ -145,7 +146,7 @@ class Symbols {
 		for (document in xfl.documents) {
 			if (document.symbols.exists(instance.libraryItemName)) {
 				var symbolItem: DOMSymbolItem = document.symbols.get(instance.libraryItemName);
-				movieClip = new XFLMovieClip(xfl, symbolItem.timeline);
+				movieClip = new XFLMovieClip(xfl, symbolItem.timeline, symbolItem.scaleGrid);
 				// TODO: a.drewke, hack to inject timeline name into symbol instance if it has no name
 				if ((instance.name == null || instance.name == "") && symbolItem.timeline.name != null && symbolItem.timeline.name != "") {
 					instance.name = symbolItem.timeline.name;
@@ -176,7 +177,7 @@ class Symbols {
 		for (document in xfl.documents) {
 			if (document.symbols.exists(instance.libraryItemName)) {
 				var symbolItem = document.symbols.get(instance.libraryItemName);
-				sprite = new XFLSprite(xfl, symbolItem.timeline);
+				sprite = new XFLSprite(xfl, symbolItem.timeline, symbolItem.scaleGrid);
 				// TODO: a.drewke, hack to inject timeline name into symbol instance if it has no name
 				if ((instance.name == null || instance.name == "") && symbolItem.timeline.name != null && symbolItem.timeline.name != "") {
 					instance.name = symbolItem.timeline.name;
